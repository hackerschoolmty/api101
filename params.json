{"name":"Api101","tagline":"The way api are built is here","body":"#APIs 101\r\n\r\nBecause we all want to talk to each other, no matter what.\r\n\r\n###Topics\r\n* Introduction to APIs\r\n\t* [Why should I care?](#why-should-i-care)\r\n\t* [Webservice structure](#webservice-structure)\r\n\t* [Resources & relationships structure](#resources--relationships-structure)\r\n\t* [Content-Negotiation](#content-negotiation)\r\n\t* [Actually using the API](#actually-using-the-api)\r\n* [Versioning](#versioning)\r\n\t* Parameter\r\n\t* URL parameters\r\n\t* Headers\r\n* [ActiveModelSerializers](#activemodelserializers)\r\n* [Exploring API](#exploring-api)\r\n\t* Sabisu\r\n* [Resources](#resources)\r\n\r\n--\r\n\r\n###Introduction to APIs\r\n\r\n####Why should I care?\r\n\r\n- It is scalable\r\n- It is trendy\r\n- The need to communicate multiple devices between each other\r\n- Keep sync easily\r\n- Performance\r\n- Interoperability\r\n- Mobile devices, watches, drones, arduino\r\n\r\n####Webservice structure\r\n\r\n![webservice.png](webservice.png)\r\n\r\n####Resources & relationships structure\r\n\r\n* Individual representation\r\n\t* Keep in mind that the root key of the resource should be the name of the resource, but just as a guide not actually a rule.\r\n\r\n\t**An individual resource should be represented as a simple JSON object**\r\n\r\n```json\r\n{\r\n    \"user\": {\r\n        \"id\": 1,\r\n        \"email\": \"kurenn@icalialabs.com\",\r\n        \"name\": \"Abraham Kuri\"      \r\n    }\r\n}\r\n```\r\n\r\n* Multiple resource representation\r\n\r\n**A collection of resources should be represented as an\r\narray of JSON objects**\r\n\r\n```json\r\n{\r\n    \"users\": [{\r\n            \"id\": 1,\r\n            \"email\": \"kurenn@icalialabs.com\",\r\n            \"name\": \"Abraham Kuri\"  \r\n    }, {\r\n            \"id\": 2,\r\n            \"email\": \"hola@hackerschool.mx\",\r\n            \"name\": \"Da hacker school\" \r\n        }]\r\n}\r\n```\r\n\r\n* To-One Relationship Resource Representation\r\n\r\n**An object embedded into another one**\r\n\r\n```json\r\n{\r\n    \"post\": {\r\n        \"id\": 1,\r\n        \"content\": \"This is me teaching you about APIs\",\r\n        \"created_at\": \"2014-10-12T19:34:23Z\",\r\n        \"author\": {\r\n            \"id\": 1,\r\n            \"name\": \"Abraham Kuri\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n* To-Many Relationship Resource Representation\r\n\r\n**An object embedded with a collection \r\nof other related objects**\r\n\r\n```json\r\n{\r\n    \"book\": {\r\n        \"id\": 1,\r\n        \"title\": \"API's on Rails\",\r\n        \"authors\": [{\r\n            \"id\": 1,\r\n            \"name\": \"Abraham Kuri\"\r\n        }, {\r\n            \"id\": 2,\r\n            \"name\": \"Osvaldo Ayala\"\r\n        }]\r\n    }\r\n}\r\n```\r\n\r\n*Be aware that this may be inefficient, due to the number of authors. In this case creating another endpoint for authors, would be a good solution.*\r\n\r\n####Content-Negotiation\r\n\r\n> Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI\r\n> \r\n> https://en.wikipedia.org/wiki/Content_negotiation\r\n\r\nThere are two ways in which you can specify the content you are requesting:\r\n\r\n1. From the URI format(http://api.hackerschool.mx/members.json)\r\n2. From an Accept Header (application/json)\r\n\r\n![contentNegotiation](contentNegotiation.png)\r\n\r\n\r\n####Actually using the API\r\n\r\nWe have put together a super simple API to play around a little bit:\r\n\r\n[https://still-earth-6525.herokuapp.com/api/](https://still-earth-6525.herokuapp.com/api/)\r\n\r\nIt only contains a basic CRUD for users, the endpoints are as follow:\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Request verb</th>\r\n\t\t\t<th>EndPoint</th>\r\n\t\t\t<th>Params</th>\r\n\t\t\t<th>Response Code</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>GET</td>\r\n\t\t\t<td>/users</td>\r\n\t\t\t<td> - </td>\r\n\t\t\t<td>200 - Success</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>GET</td>\r\n\t\t\t<td>/users/:id</td>\r\n\t\t\t<td>:id</td>\r\n\t\t\t<td>200 - Success</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>POST</td>\r\n\t\t\t<td>/users</td>\r\n\t\t\t<td>user[email], user[name]</td>\r\n\t\t\t<td>201 - Created</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PUT/PATCH</td>\r\n\t\t\t<td>/users/:id</td>\r\n\t\t\t<td>:id, user[email], user[name]</td>\r\n\t\t\t<td>200 - Success</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>DELETE</td>\r\n\t\t\t<td>/users/:id</td>\r\n\t\t\t<td>:id</td>\r\n\t\t\t<td>204 - No content</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\nWe will need a client to test this, let's do it with [Postman](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm)\r\n\r\n###Versioning\r\n\r\nVersioning helps prevent major changes from breaking existing clients.\r\n\r\nWe can version the API and allow the access through different strategies:\r\n\r\n**URI param**\r\n\r\nWith this approach you will expect a URI like:\r\n\r\n`http://hackerschool.com/api/:version`\r\n\r\nHere the `:version` could be:\r\n\r\n* v1\r\n* 1\r\n* 1.023243\r\n* v2.1.3\r\n\r\nIt really depends on your versioning structure.\r\n\r\n**URL param**\r\n\r\nWith this approach you will expect a URI like:\r\n\r\n`http://hackerschool.com/api?version=:version`\r\n\r\nHere the `:version` could be:\r\n\r\n* v1\r\n* 1\r\n* 1.023243\r\n* v2.1.3\r\n\r\nIt really depends on your versioning structure.\r\n\r\n**Request header**\r\n\r\nWith this approach you will expect a URI like:\r\n\r\n`http://hackerschool.com/api/`\r\n\r\nBut on the request headers, you have to include something like:\r\n\r\n`Accept: application/vnd.hackerschool.mx+json; version=1`\r\n\r\nHere the `:version` could be:\r\n\r\n* v1\r\n* 1\r\n* 1.023243\r\n* v2.1.3\r\n\r\nIt really depends on your versioning structure.\r\n\r\n--\r\n\r\n*It is highly recommended that you keep your api behind a subdomain, this way you can scalate via DNS, in case your API is being under a heavy demand*\r\n\r\n### ActiveModelSerializers\r\n\r\n> ActiveModel::Serializers brings convention over configuration to your JSON generation.\r\n> \r\n> https://github.com/rails-api/active_model_serializers\r\n\r\n**Code Time**\r\n\r\n###Exploring API\r\n\r\nSabisu is a powerful postman-like engine client to explore your Rails application api. It's still under heavy development, but it is quite impressive and beautiful\r\n\r\n[https://github.com/IcaliaLabs/sabisu-rails](https://github.com/IcaliaLabs/sabisu-rails)\r\n\r\n**Sabisu on the wild**\r\n\r\n[http://sabisu.herokuapp.com/sabisu_rails/explorer](http://sabisu.herokuapp.com/sabisu_rails/explorer)\r\n\r\n###Resources\r\n\r\n* [http://jsonapi.org/](http://jsonapi.org/)\r\n* [https://github.com/rails-api/active_model_serializers](https://github.com/rails-api/active_model_serializers)\r\n* [http://apionrails.icalialabs.com/book/](http://apionrails.icalialabs.com/book/)\r\n* [https://www.youtube.com/watch?v=HKksu4aq7Go](https://www.youtube.com/watch?v=HKksu4aq7Go)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}